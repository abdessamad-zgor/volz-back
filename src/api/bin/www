#!/usr/bin/env node

var app = require('../app');
var http = require('http');
var debug = require('debug');

const appPort = normalizePort(process.env.PORT || 5000);
app.set('port', appPort);

var appServer = http.createServer(app);

appServer.listen(appPort);

appServer.on('listening', onListeningApp);
appServer.on('error', onErrorApp);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorApp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof appPort === 'string' ? 'Pipe ' + appPort : 'Port ' + appPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningApp() {
  var addr = appServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process.on('uncaughtException', function (err) {
  console.log(err);
  var stack = err.stack;
  //you can also notify the err/stack to support via email or other APIs
});
